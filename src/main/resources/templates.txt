Binary Search
public static int binarySearch(List<Integer> arr, int target) {
    int left = 0;
    int right = arr.length - 1;
    int firstTrueIndex = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (feasible(mid)) {
            firstTrueIndex = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return firstTrueIndex;
}

Sliding Window Fixed
private static W slidingWindowFixed(List<T> input, int windowSize) {
    W ans = window = input[0..windowSize);
    for (int right = windowSize; right < input.size(); ++right) {
        int left = right - windowSize;
        remove input.get(left) from window
        append input.get(right) to window
        ans = optimal(ans, window);
    }
    return ans;
}

Sliding Window Flexible Longest
private static W slidingWindowFlexibleLongest(List<T> input) {
    initialize window, ans
    int left = 0;
    for (int right = 0; right < input.size(); ++right) {
        append input.get(right) to window
        while (invalid(window)) {         // update left until window is valid again
            remove input.get(left) from window
            ++left;
        }
        ans = Math.max(ans, window);           // window is guaranteed to be valid here
    }
    return ans;
}

Sliding Window Flexible Smallest
private static W slidingWindowFlexibleShortest(List<T> input) {
    initialize window, ans
    int left = 0;
    for (int right = 0; right < input.size(); ++right) {
        append input.get(right) to window
        while (valid(window)) {
            ans = Math.min(ans, window);   // window is guaranteed to be valid here
            remove input.get(left) from window
            ++left;
        }
    }
    return ans;
}

Monotonic Stack
public static void monoStack(List<Integer> insertEntries) {
    ArrayList<Integer> stack;
    for (int entry : insertEntries) {
        while (!stack.isEmpty() && stack.get(stack.size() - 1) <= entry) {
            stack.remove(stack.size() - 1);
            // Do something with the popped item here
        }
        stack.add(entry);
    }
}
Backtracking 2
private static int dfs(Integer startIndex, List<T> target) {
    if (isLeaf(startIndex)) {
        return 1;
    }

    ans = initialValue;
    for (T edge : getEdges(startIndex, [...additional states])) {
        if (additional states) {
            update([...additional states]);
        }
        ans = aggregate(ans, dfs(startIndex + edge.length(), [...additional states])
        if (additional states) {
            revert([...additional states]);
        }
    }
    return ans;
}

Backtracking 1
private static void dfs(int startIndex, List<T> path, List<List<T>> res, [...additional states]) {
    if (isLeaf(startIndex)) {
        res.add(new ArrayList<>(path)); // add a copy of the path to the result
        return;
    }
    for (T edge : getEdges(startIndex, [...additional states])) {
        path.add(choice);
        if (...additionl statees) update(...additional states)
        dfs(startIndex + edge.length(), res, [...additional states]);
        path.remove(path.size() - 1);
        // revert(...additional states) if necessary e.g. permutations
    }
}

Tree BFS
public Node bfs(Node root) {
    ArrayDeque<Node> queue = new ArrayDeque<>();
    queue.add(root);
    while (queue.size() > 0) {
        Node node = queue.poll();
        for (Node child : node.children) {
            if (isGoal(child)) {
                return FOUND(child);
            }
            queue.add(child);
        }
    }
    return NOT_FOUND;
}

Tree DFS
public static Node dfs(Node root, int target) {
    if (root == null) return null;
    if (root.val == target) {
        return root;
    }
    Node left = dfs(root.left, target);
    if (left != null) {
        return left;
    }
    return dfs(root.right, target);
}

Graph BFS
public void bfs(Node root) {
    ArrayDeque<Node> queue = new ArrayDeque<>();
    queue.add(root);
    Set<Node> visited = new HashSet<>();
    visited.add(root);
    while (queue.size() > 0) {
        Node node = queue.pop();
        for (Node neighbor : getNeighbors(node)) {
            if (visited.contains(neighbor)) {
                continue;
            }
            queue.add(neighbor);
            visited.add(neighbor);
        }
    }
}

Graph BFS on Matrix
public int numRows = grid.length;
public int numCols = grid[0].length;

public List<Coordinate> getNeighbors(Coordinate coord) {
    int row = coord.row;
    int col = coord.col;
    int[] deltaRow = {-1, 0, 1, 0};
    int[] deltaCol = {0, 1, 0, -1};
    List<Coordinate> res = new ArrayList<>();
    for (int i = 0; i < deltaRow.length; i++) {
        int neighborRow = row + deltaRow[i];
        int neighborCol = col + deltaCol[i];
        if (0 <= neighborRow && neighborRow < numRows &&
            0 <= neighborCol && neighborCol < numCols) {
                res.add(new Coordinate(neighborRow, neighborCol));
            }
    }
    return res;
}

public void bfs(Coordinate startingNode) {
    Deque<Coordinate> queue = new ArrayDeque<>();
    queue.add(startingNode);
    Set<Coordinate> visited = new HashSet<>();
    visited.add(startingNode);

    while (queue.size() > 0) {
        Coordinate node = queue.pop();
        for (Coordinate neighbor : getNeighbors(node)) {
            if (visited.contains(neighbor)) continue;
            // Do stuff with the node if required
            // ...
            queue.add(neighbor);
            visited.add(neighbor);
        }
    }
}

Graph DFS
public void dfs(Node root, Set<Node> visited) {
    for (Node neighbor : node.neighbors) {
        if (visited.contains(node)) {
            continue;
        }
        visited.add(neighbor);
        dfs(neighbor, visited);
    }
}

Topological Ordering
public static <T> Map<T, Integer> findInDegree(Map<T, List<T>> graph) {
    Map<T, Integer> inDegree = new HashMap<>();
    graph.keySet().forEach(node -> {
        inDegree.put(node, 0);
    });
    graph.entrySet().forEach(entry -> {
        for (T neighbor : entry.getValue()) {
            inDegree.put(neighbor, Indegree.get(neighbor) + 1);
        }
    });
    return inDegree;
}

public static <T> List<T> topoSort(Map<T, List<T>> graph) {
    List<T> res = new ArrayList<>();
    Queue<T> q = new ArrayDeque<>();
    Map<T, Integer> inDegree = findInDegree(graph);
    inDegree.entrySet().forEach(entry -> {
        if (entry.getValue() == 0) {
            q.add(entry.getKey());
        }
    });
    while (!q.isEmpty()) {
        T node = q.poll();
        res.add(node);
        for (T neighbor : graph.get(node)) {
            // subtract one from every neighbour
            inDegree.put(neighbor, inDegree.get(neighbor) - 1);
            // once the number of parents reaches zero you add it to the queue
            if (inDegree.get(neighbor) == 0) {
                q.add(neighbor);
            }
        }
    }
    // check for cycle
    return (graph.size() == res.size()) ? res : null;
}
